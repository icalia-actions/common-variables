{"version":3,"file":"index.js","sources":["../webpack://common-variables/external \"fs\"","../webpack://common-variables/external \"os\"","../webpack://common-variables/webpack/bootstrap","../webpack://common-variables/webpack/runtime/compat","../webpack://common-variables/./index.js"],"sourcesContent":["module.exports = require(\"fs\");","module.exports = require(\"os\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","const os = require(\"os\")\nconst fs = require(\"fs\")\n\nfunction setOutput(outputName, outputValue) {\n  let out = `::set-output name=${outputName}::${outputValue}`\n  return console.log(out)\n}\n\nfunction getRunnerUid() {\n  return os.userInfo().uid\n}\n\nfunction getRunnerUser() {\n  return os.userInfo().username\n}\n\nfunction getGitBranch() {\n  let gitBranch = process.env.GITHUB_HEAD_REF || process.env.GITHUB_REF\n  return gitBranch.replace(/^refs\\/heads\\//, '')\n}\n\nfunction getGitCommitSHA() {\n  let gitCommitSha = process.env.GITHUB_SHA\n  const eventName = process.env.GITHUB_EVENT_NAME\n  \n  if (eventName == 'pull_request') {\n    const eventData = JSON.parse(fs.readFileSync(process.env.GITHUB_EVENT_PATH))\n    gitCommitSha = eventData.pull_request.head.sha\n  }\n\n  return gitCommitSha\n}\n\nfunction getGitCommitShortSHA() {\n  return getGitCommitSHA().substring(0, 7)\n}\n\nfunction getGitDasherizedBranch() {\n  let dasherized = getGitBranch().split('/').reverse().join('-').toLowerCase()\n  return dasherized.replace(/[^a-z0-9]/gmi, '-')\n}\n\nsetOutput('git-branch', getGitBranch())\nsetOutput('git-dasherized-branch', getGitDasherizedBranch())\n\nsetOutput('git-commit-sha', getGitCommitSHA())\nsetOutput('git-commit-short-sha', getGitCommitShortSHA())\n\nsetOutput('runner-uid', getRunnerUid())\nsetOutput('runner-user', getRunnerUser())\n"],"mappings":";;;;;;;AAAA;;A;;;;;;ACAA;;A;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;A","sourceRoot":""}